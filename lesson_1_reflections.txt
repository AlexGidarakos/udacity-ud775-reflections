How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    I was able to focus only on the lines that had changed, instead of having
    to compare the two versions line-by-line, top-to-bottom.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It could possibly enable me to spend less time on debugging.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: Logical organization of the changes, less unecessary versions.
    Cons: Requires the user's commitment to commiting when necessary.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    They are source code-oriented, where a logical change could span many files.

How can you use the commands git log and git diff to view the history of files?

    With git log, we can locate an interesting commit by its message. With git
    diff id id_next, we can view the changes of this particular commit.

How might using version control make you more confident to make changes that
could break something?

    Because you can always go back to a previous working state.

Now that you have your workspace set up, what do you want to try using Git for?

    I'd like to create a repository for a personal Python project.
